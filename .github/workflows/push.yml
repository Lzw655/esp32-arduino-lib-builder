name: ESP32 Arduino Libs CI

on:
  push:
    branches:
    - master
  pull_request:

concurrency:
  group: esp-idf-libs-${{github.event.pull_request.number || github.ref}}
  cancel-in-progress: true

jobs:
  check-deploy-needed:
    name: Check if result should be deployed
    runs-on: ubuntu-latest
    outputs:
      idf_commit: ${{ steps.check.outputs.idf_commit }}
      ar_branch: ${{ steps.check.outputs.ar_branch }}
      ar_new_commit_message: ${{ steps.check.outputs.ar_new_commit_message }}
      ar_new_branch_name: ${{ steps.check.outputs.ar_new_branch_name }}
      ar_new_pr_title: ${{ steps.check.outputs.ar_new_pr_title }}
      ar_has_commit: ${{ steps.check.outputs.ar_has_commit }}
      ar_has_branch: ${{ steps.check.outputs.ar_has_branch }}
      ar_has_pr: ${{ steps.check.outputs.ar_has_pr }}
      libs_version: ${{ steps.check.outputs.libs_version }}
      libs_has_commit: ${{ steps.check.outputs.libs_has_commit }}
      libs_has_branch: ${{ steps.check.outputs.libs_has_branch }}
    steps:
    - uses: actions/checkout@v3
    - id: check
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        GIT_AUTHOR_EMAIL: ${{ secrets.PUSH_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.PUSH_EMAIL }}
      run: bash ./tools/check-deploy-needed.sh

  build-libs:
    name: Build Libs for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: check-deploy-needed
    strategy:
      matrix:
        target: [esp32, esp32s2, esp32s3, esp32c3, esp32c6, esp32h2]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    # - name: Install dependencies
    #   run: bash ./tools/prepare-ci.sh
    - shell: bash
      name: Build Libs for ${{ matrix.target }}
      run: echo ${{ matrix.target }}
    #   run: bash ./build.sh -t ${{ matrix.target }}
    # - name: Upload archive
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: artifacts
    #     path: dist

  deploy-to-repos:
    name: Deploy build
    runs-on: ubuntu-latest
    needs: build-libs
    steps:
    - uses: actions/checkout@v3
    - shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        GIT_AUTHOR_EMAIL: ${{ secrets.PUSH_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.PUSH_EMAIL }}
        IDF_COMMIT: ${{ needs.check-deploy-needed.outputs.idf_commit }}
        AR_BRANCH: ${{ needs.check-deploy-needed.outputs.ar_branch }}
        AR_NEW_COMMIT_MESSAGE: ${{ needs.check-deploy-needed.outputs.ar_new_commit_message }}
        AR_NEW_BRANCH_NAME: ${{ needs.check-deploy-needed.outputs.ar_new_branch_name }}
        AR_NEW_PR_TITLE: ${{ needs.check-deploy-needed.outputs.ar_new_pr_title }}
        AR_HAS_COMMIT: ${{ needs.check-deploy-needed.outputs.ar_has_commit }}
        AR_HAS_BRANCH: ${{ needs.check-deploy-needed.outputs.ar_has_branch }}
        AR_HAS_PR: ${{ needs.check-deploy-needed.outputs.ar_has_pr }}
        LIBS_VERSION: ${{ needs.check-deploy-needed.outputs.libs_version }}
        LIBS_HAS_COMMIT: ${{ needs.check-deploy-needed.outputs.libs_has_commit }}
        LIBS_HAS_BRANCH: ${{ needs.check-deploy-needed.outputs.libs_has_branch }}
      run: |
        echo "IDF_COMMIT: $IDF_COMMIT"
        echo "AR_BRANCH: $AR_BRANCH"
        echo "AR_NEW_COMMIT_MESSAGE: $AR_NEW_COMMIT_MESSAGE"
        echo "AR_NEW_BRANCH_NAME: $AR_NEW_BRANCH_NAME"
        echo "AR_NEW_PR_TITLE: $AR_NEW_PR_TITLE"
        echo "AR_HAS_COMMIT: $AR_HAS_COMMIT"
        echo "AR_HAS_BRANCH: $AR_HAS_BRANCH"
        echo "AR_HAS_PR: $AR_HAS_PR"
        echo "LIBS_VERSION: $LIBS_VERSION"
        echo "LIBS_HAS_COMMIT: $LIBS_HAS_COMMIT"
        echo "LIBS_HAS_BRANCH: $LIBS_HAS_BRANCH"

  # build-libs:
  #   name: Build Libs for ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [esp32, esp32s2, esp32s3, esp32c3, esp32c6, esp32h2]
  #     fail-fast: false
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Install dependencies
  #     run: bash ./tools/prepare-ci.sh
  #   - name: Build Libs for ${{ matrix.target }}
  #     run: bash ./build.sh -t ${{ matrix.target }}
  #   - name: Upload archive
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: artifacts
  #       path: out

  # inspect-artifacts:
  #   name: Check resulting artifacts
  #   needs: build-libs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: artifacts
  #         path: out
  #     - shell: bash
  #       run: |
  #         ls -l out
  #         ls -l out/tools
  #         ls -l out/tools/esp32-arduino-libs

